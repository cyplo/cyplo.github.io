<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Adventurous Computing (Posts about docker)</title><link>https://blog.cyplo.net/</link><description></description><atom:link href="https://blog.cyplo.net/categories/docker.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Tue, 02 Apr 2019 08:32:42 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Configure AWS Elastic Beanstalk Docker environment variables</title><link>https://blog.cyplo.net/posts/2018/04/configure-docker-env-vars-on-beanstalk.html</link><dc:creator>Cyryl Płotnicki</dc:creator><description>&lt;div&gt;&lt;p&gt;AWS Beanstalk is a good 'intermediate' level hosting for Docker containers. It gives you load balancing and scalability pretty much out of the box in exchange for being a bit more opaque to configure. The Docker bits are a bit more hidden away there. 
In a typical production setup you would want to have Docker images not containing anything environment related, e.g. to be able to run them both in production and locally. An easy way to achieve that with Docker is via environment variables. On the local environment it's &lt;code&gt;docker run --env NAME=VALUE&lt;/code&gt; - what would be a Beanstalk equivalent though ?&lt;/p&gt;
&lt;p&gt;It turns out that Beanstalk has a magical configuration directory structure that you can pass to an environment. 
It goes like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;configuration.zip
   Dockerrun.aws.json 
   .ebextensions/
       environmentvariables.config
&lt;/pre&gt;


&lt;p&gt;Where &lt;code&gt;Dockerrun.aws.json&lt;/code&gt; is your regular Docker definition file for Beanstalk, can look like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;{
    "AWSEBDockerrunVersion": "1",
    "Image": {
        "Name": "image:latest",
        "Update": "true"
    },
    "Ports": [
        {
        "ContainerPort": "1234"
        }
    ]
}
&lt;/pre&gt;


&lt;p&gt;While &lt;code&gt;.ebextensions/environmentvariables.config&lt;/code&gt; is where, well, you set the environment variables that will be defined in the container. Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;option_settings:
  - option_name: ENV_VAR1
    value: "some value"
  - option_name: ENV_VAR2
    value: "some other value"
&lt;/pre&gt;


&lt;p&gt;But wait, there's more ! Get the zip file and upload it to some S3 bucket, I'm going to assume that the file is at &lt;code&gt;BUCKET_NAME/CONFIG_PATH&lt;/code&gt; in the example below.
Then you need to tell Beanstalk where the file is located. This can be achieved by creating a new application version:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;aws elasticbeanstalk create-application-version --application-name APPLICATION_NAME --version-label VERSION --source-bundle S3Bucket=BUCKET_NAME,S3Key=CONFIG_PATH
aws elasticbeanstalk update-environment --environment-name ENVIRONMENT_NAME --version-label VERSION
&lt;/pre&gt;&lt;/div&gt;</description><category>amazon</category><category>aws</category><category>docker</category><category>eb</category><category>elastic beanstalk</category><guid>https://blog.cyplo.net/posts/2018/04/configure-docker-env-vars-on-beanstalk.html</guid><pubDate>Mon, 23 Apr 2018 12:00:00 GMT</pubDate></item><item><title>Running host programs in isolation inside one-off Docker containers</title><link>https://blog.cyplo.net/posts/2017/02/one-off-docker-runjessie.html</link><dc:creator>Cyryl Płotnicki</dc:creator><description>&lt;div&gt;&lt;p&gt;I am quite bad at remembering how to launch docker to have everything set up correctly. Hence the following - a script that launches any commandline specified in its arguments inside a new docker container. Current directory is mounted inside the container automatically, so the thing you are executing can have its local dependencies satisfied.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_bb36532e7e1f481aa2a02c383b17d8b1-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;a name="rest_code_bb36532e7e1f481aa2a02c383b17d8b1-2"&gt;&lt;/a&gt;&lt;span class="nv"&gt;USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;whoami&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;a name="rest_code_bb36532e7e1f481aa2a02c383b17d8b1-3"&gt;&lt;/a&gt;&lt;span class="nv"&gt;MOUNT_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/mnt"&lt;/span&gt;
&lt;a name="rest_code_bb36532e7e1f481aa2a02c383b17d8b1-4"&gt;&lt;/a&gt;&lt;span class="nv"&gt;CURRENT_DIRECTORY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt; -P&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="c1"&gt;# untangle symbolic links if needed - SELinux needs the real path&lt;/span&gt;
&lt;a name="rest_code_bb36532e7e1f481aa2a02c383b17d8b1-5"&gt;&lt;/a&gt;&lt;span class="nv"&gt;IMAGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"debian:jessie"&lt;/span&gt;
&lt;a name="rest_code_bb36532e7e1f481aa2a02c383b17d8b1-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_bb36532e7e1f481aa2a02c383b17d8b1-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -z &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;a name="rest_code_bb36532e7e1f481aa2a02c383b17d8b1-8"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"usage: `basename &lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="s2"&gt;` command_to_run_inside_a_container"&lt;/span&gt;
&lt;a name="rest_code_bb36532e7e1f481aa2a02c383b17d8b1-9"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;a name="rest_code_bb36532e7e1f481aa2a02c383b17d8b1-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;a name="rest_code_bb36532e7e1f481aa2a02c383b17d8b1-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_bb36532e7e1f481aa2a02c383b17d8b1-12"&gt;&lt;/a&gt;&lt;span class="nv"&gt;RESOLVED_ARGUMENTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;a name="rest_code_bb36532e7e1f481aa2a02c383b17d8b1-13"&gt;&lt;/a&gt;docker run -i -t -v &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$CURRENT_DIRECTORY&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;:&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$MOUNT_PATH&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;:Z &lt;span class="nv"&gt;$IMAGE&lt;/span&gt; bash -c &lt;span class="s2"&gt;"useradd -M -d '&lt;/span&gt;&lt;span class="nv"&gt;$MOUNT_PATH&lt;/span&gt;&lt;span class="s2"&gt;' &lt;/span&gt;&lt;span class="nv"&gt;$USERNAME&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; cd '&lt;/span&gt;&lt;span class="nv"&gt;$MOUNT_PATH&lt;/span&gt;&lt;span class="s2"&gt;' &amp;amp;&amp;amp; bash -c '&lt;/span&gt;&lt;span class="nv"&gt;$RESOLVED_ARGUMENTS&lt;/span&gt;&lt;span class="s2"&gt;'"&lt;/span&gt;
&lt;a name="rest_code_bb36532e7e1f481aa2a02c383b17d8b1-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_bb36532e7e1f481aa2a02c383b17d8b1-15"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# restore SELinux context for the current directory&lt;/span&gt;
&lt;a name="rest_code_bb36532e7e1f481aa2a02c383b17d8b1-16"&gt;&lt;/a&gt;&lt;span class="nv"&gt;restorecon_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;which restorecon&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;a name="rest_code_bb36532e7e1f481aa2a02c383b17d8b1-17"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -x &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$restorecon_path&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;a name="rest_code_bb36532e7e1f481aa2a02c383b17d8b1-18"&gt;&lt;/a&gt;    restorecon -R &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$CURRENT_DIRECTORY&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;a name="rest_code_bb36532e7e1f481aa2a02c383b17d8b1-19"&gt;&lt;/a&gt;&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I use vanilla Debian Jessie as a run platform there, mostly because this is what most of my servers run.
The script covers setting up SELinux and mounting the directory from which it is run as &lt;tt class="docutils literal"&gt;/mnt&lt;/tt&gt; inside the container while also having the default non-root user added.&lt;/p&gt;
&lt;p&gt;Run Jessie, run !&lt;/p&gt;&lt;/div&gt;</description><category>container</category><category>docker</category><category>jessie</category><category>linux</category><guid>https://blog.cyplo.net/posts/2017/02/one-off-docker-runjessie.html</guid><pubDate>Fri, 17 Feb 2017 22:08:46 GMT</pubDate></item><item><title>Using ad hoc Docker volumes on SELinux systems</title><link>https://blog.cyplo.net/posts/2016/12/ad-hoc-docker-volumes-selinux.html</link><dc:creator>Cyryl Płotnicki</dc:creator><description>&lt;div&gt;&lt;p&gt;I've recently tried running some quick Docker commands using host's directory as a volume:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_fd10a8ef98f94628abbf7dc8dfca6b20-1"&gt;&lt;/a&gt;&lt;span class="go"&gt;docker run -i -t -v `pwd`:/mnt debian:jessie bash -c "ls -hal /mnt"&lt;/span&gt;
&lt;a name="rest_code_fd10a8ef98f94628abbf7dc8dfca6b20-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;ls: cannot open directory /mnt: Permission denied&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I use Fedora as my main OS, which, it turns out, has some pretty nice SELinux settings. These deny access from inside the container to the outside.
Said Fedora consists mostly of almost-newest-but-stable everything though, which makes Docker to be in a fairly recent version.
A version that understands how to change a SELinux context for the directory we're mounting, by itself !
You need at least Docker v1.7 for this.&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_fbe89fdc08964a8385826037c379aa9a-1"&gt;&lt;/a&gt;&lt;span class="go"&gt;docker run -i -t -v `pwd`:/mnt:Z debian:jessie bash -c "ls -hal /mnt"&lt;/span&gt;
&lt;a name="rest_code_fbe89fdc08964a8385826037c379aa9a-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;total 8.0K&lt;/span&gt;
&lt;a name="rest_code_fbe89fdc08964a8385826037c379aa9a-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;drwxrwxr-x.  2 1000 1000 4.0K Dec 30 18:34 .&lt;/span&gt;
&lt;a name="rest_code_fbe89fdc08964a8385826037c379aa9a-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;drwxr-xr-x. 21 root root  242 Dec 30 19:07 ..&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Please notice the capital &lt;cite&gt;Z&lt;/cite&gt; as a mount parameter.
And that is it. Mostly. Some cleanup remains, as docker leaves the host's directory with a changed SELinux context.
To restore it you need to&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_0a7a5ac1203c401a822e4ea562dcf669-1"&gt;&lt;/a&gt;&lt;span class="go"&gt;restorecon -R `pwd`&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Or use any other path you'd like instead of &lt;cite&gt;`pwd`&lt;/cite&gt; in the examples above.
Happy dockerizing !&lt;/p&gt;&lt;/div&gt;</description><category>container</category><category>data</category><category>docker</category><category>permissions</category><category>selinux</category><category>volume</category><guid>https://blog.cyplo.net/posts/2016/12/ad-hoc-docker-volumes-selinux.html</guid><pubDate>Fri, 30 Dec 2016 18:28:50 GMT</pubDate></item><item><title>Containerized zombie spawner</title><link>https://blog.cyplo.net/posts/2015/08/12/containerized-zombie-spawner.html</link><dc:creator>Cyryl Płotnicki</dc:creator><description>&lt;p&gt;Recently I was playing with a fully Dockerized setup of Jenkins at work
and found a curious issue there. Whenever Jenkins was polling the git
server the side effect was that it created a zombie ssh process. The
issue is actually
&lt;a class="reference external" href="https://github.com/jenkinsci/docker/issues/54"&gt;remediated&lt;/a&gt; by the
Jenkins team now by &lt;a class="reference external" href="https://github.com/jenkinsci/docker/commit/d5aea67dcae9d62fe4ca6ad961ffe66f65d9a591"&gt;explicitly
using&lt;/a&gt;
a tiny init system called ...
&lt;a class="reference external" href="https://github.com/krallin/tini"&gt;tini,&lt;/a&gt; started as the main
container's process instead of just starting Jenkins there. This tiny
tini thing can properly adopt and reap the children. I was all like -
wow, what a great blog entry is coming at me. I was planning to describe
how zombies come to existence on Linux and why Docker should, in my
opinion, provide an adopter-reaper by default and other very interesting
things ! But then I found a really excellent article by the
&lt;a class="reference external" href="http://www.phusion.nl/"&gt;Phusion&lt;/a&gt; team
&lt;a class="reference external" href="https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/"&gt;here&lt;/a&gt;
explaining all that and more. It is very good. You should read it. That
is it. The end. Happy reaping !&lt;/p&gt;</description><category>docker</category><category>init</category><category>jenkins</category><category>pid 1</category><category>reaper</category><category>zombie</category><guid>https://blog.cyplo.net/posts/2015/08/12/containerized-zombie-spawner.html</guid><pubDate>Wed, 12 Aug 2015 21:21:13 GMT</pubDate></item><item><title>GUI Vagrant box</title><link>https://blog.cyplo.net/posts/2014/11/09/gui-vagrant-box.html</link><dc:creator>Cyryl Płotnicki</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently I've started working on changing my default development
workflow. I'm evaluating vagrant as a main env manager, and then docker
for extra speed. In short, my &lt;tt class="docutils literal"&gt;vagrant up&lt;/tt&gt; boots up new dev box and
then couple of docker containers. What I've found is that there is not
really a plethora of GUI-enabled vagrant boxes, so I've created one ! If
you want to use it, go:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_09ccfe796ae747218f109581f7b33c9a-1"&gt;&lt;/a&gt;&lt;span class="go"&gt;vagrant init&lt;/span&gt;
&lt;a name="rest_code_09ccfe796ae747218f109581f7b33c9a-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;cyplo/ubuntu-gnome-utopic-gui vagrant up&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I will write about the whole setup later, as I'm not yet sure what approach is best for me.&lt;/p&gt;&lt;/div&gt;</description><category>development</category><category>docker</category><category>programming</category><category>ubuntu</category><category>utopic</category><category>vagrant</category><guid>https://blog.cyplo.net/posts/2014/11/09/gui-vagrant-box.html</guid><pubDate>Sun, 09 Nov 2014 16:02:13 GMT</pubDate></item></channel></rss>