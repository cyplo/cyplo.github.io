<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>Adventurous Computing (Posts about vscode)</title><link>https://blog.cyplo.net/</link><description></description><atom:link rel="self" type="application/rss+xml" href="https://blog.cyplo.net/categories/vscode.xml"></atom:link><language>en</language><lastBuildDate>Tue, 01 Jan 2019 12:49:12 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Setting up Rust development environment using VSCode on a Mac</title><link>https://blog.cyplo.net/posts/2017/11/rust-vscode-mac.html</link><dc:creator>Cyryl PÅ‚otnicki</dc:creator><description>&lt;div&gt;&lt;p&gt;This post is a part of the upcoming series on different ways of setting up your Rust development environment. It's time for VSCode.&lt;/p&gt;
&lt;h3&gt;Completion and highlighting&lt;/h3&gt;
&lt;p&gt;While on Linux VSCode with the Rust plugin seems to work more or less out of the box, on a Mac I needed to spend some time configuring it.&lt;/p&gt;
&lt;p&gt;First things first though, let's start by installing Rust version manager, rustup.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;curl https://sh.rustup.rs -sSf | sh
&lt;/pre&gt;


&lt;p&gt;We will be using nightly version of rust as to have one version that can compile all of our tools. This is mostly due to &lt;a href="https://github.com/rust-lang-nursery/rust-clippy"&gt;&lt;code&gt;clippy&lt;/code&gt;&lt;/a&gt; requiring a nightly compiler.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;rustup install nightly
rustup default nightly
&lt;/pre&gt;


&lt;p&gt;We will need Rust Language Server to provide the code completion.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;rustup component add rls-preview --toolchain nightly
rustup component add rust-analysis --toolchain nightly
rustup component add rust-src --toolchain nightly
&lt;/pre&gt;


&lt;p&gt;For a more wholesome experience, please have some tools as well:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;cargo install clippy rustfmt rustsym
&lt;/pre&gt;


&lt;p&gt;Now finally, for the VSCode itself, press &lt;code&gt;cmd-p&lt;/code&gt; and &lt;code&gt;ext install vscode-rust&lt;/code&gt;. I'm using the new &lt;code&gt;Rust&lt;/code&gt; extension as &lt;code&gt;Rusty Code&lt;/code&gt; has been discontinued.&lt;/p&gt;
&lt;p&gt;If you're lucky - that's it, you should have working completion and highlighting in Rust files. Check this by opening any Rust source code file. 
If you're greeted by this message: &lt;code&gt;You have chosen RLS mode but neither RLS executable path is specified nor rustup is installed&lt;/code&gt; - then we need to get the extension to get to know your setup a bit:&lt;/p&gt;
&lt;p&gt;In VSCode go to &lt;code&gt;Settings&lt;/code&gt; using &lt;code&gt;cmd-,&lt;/code&gt; and put the following config elements there:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;{
    "rust.cargoPath": "/Users/yourusername/.cargo/bin/cargo",
    "rust.cargoHomePath": "/Users/yourusername/.cargo",
    "rust.rustfmtPath": "/Users/yourusername/.cargo/bin/rustfmt",
    "rust.rustsymPath": "/Users/yourusername/.cargo/bin/rustsym",
    "rust.rustLangSrcPath": "/Users/yourusername/.rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/src",
    "rust.mode": "rls",
    "rust.rls": {
        "executable": "/Users/yourusername/.cargo/bin/rls",
        "useRustfmt": true
    }
}
&lt;/pre&gt;


&lt;p&gt;As the paths in the config need to be absolute, remember to adjust to your situation (system username) accordingly.&lt;/p&gt;
&lt;p&gt;Now when you reload and start editing a Rust file you should see &lt;code&gt;RLS: Analysis finished&lt;/code&gt; on the bottom bar and the completion and highlighting should all work. Yay !&lt;/p&gt;
&lt;h3&gt;Building and testing&lt;/h3&gt;
&lt;p&gt;VSCode has a system of tasks that we can leverage to run the build and test from within VSCode.
If you go to &lt;code&gt;Tasks-&amp;gt;Configure&lt;/code&gt; tasks it will create an empty &lt;code&gt;tasks.json&lt;/code&gt; file in your repository.
Change it to the following to allow for &lt;code&gt;cargo&lt;/code&gt; to be hooked up as your build tool and test runner.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "build",
            "type": "shell",
            "command": "cargo build",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": []
        },
        {
            "label": "test",
            "type": "shell",
            "command": "cargo test",
            "group": {
                "kind": "test",
                "isDefault": true
            }
        }
    ]
}
&lt;/pre&gt;


&lt;p&gt;You can use &lt;code&gt;cmd-shift-b&lt;/code&gt; to run the build now.&lt;/p&gt;
&lt;h3&gt;Debugging&lt;/h3&gt;
&lt;p&gt;For the native debugger to work we need to install another extension to VSCode called &lt;a href="https://github.com/vadimcn/vscode-lldb/blob/master/MANUAL.md"&gt;'LLDB Debugger'&lt;/a&gt;. That would be &lt;code&gt;cmd-p&lt;/code&gt; and &lt;code&gt;ext install vadimcn.vscode-lldb&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After reloading VSCode you should be able to set breakpoints on the side gutter and run the program using debugger by pressing &lt;code&gt;F5&lt;/code&gt;. First time doing this will result in the debugger choice window. Choose &lt;code&gt;LLDB Debugger&lt;/code&gt; as your debugger and you will be greeted with a JSON configuration file in which you need to tell the debugger a few details on your project. It may look like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "lldb",
            "request": "launch",
            "name": "Debug",
            "program": "&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;workspaceRoot&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/target/debug/name_of_your_executable",
            "args": [],
            "cwd": "&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;workspaceRoot&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;",
            "preLaunchTask": "build"
        }
    ]
}
&lt;/pre&gt;


&lt;p&gt;And that should be it !&lt;/p&gt;
&lt;p&gt;Now you should be able to set breakpoints and debug through the code.&lt;/p&gt;
&lt;p&gt;Start the debugging session by pressing &lt;code&gt;F5&lt;/code&gt; again - this should result in the build proceeding and then the debugger launching.&lt;/p&gt;
&lt;h3&gt;Questions ?&lt;/h3&gt;
&lt;p&gt;Any questions ? Ask on &lt;a href="https://users.rust-lang.org/"&gt;https://users.rust-lang.org/&lt;/a&gt; and ping me the link to the post on &lt;a href="https://twitter.com/cyplo"&gt;Twitter&lt;/a&gt; or email it to me at &lt;a href="mailto:blog@cyplo.net"&gt;blog@cyplo.net&lt;/a&gt;. This way the answer will be visible to everyone in the community.&lt;/p&gt;
&lt;p&gt;Keep on Rusting !&lt;/p&gt;&lt;/div&gt;</description><category>ide</category><category>rust</category><category>vscode</category><guid>https://blog.cyplo.net/posts/2017/11/rust-vscode-mac.html</guid><pubDate>Sat, 25 Nov 2017 13:50:27 GMT</pubDate></item></channel></rss>